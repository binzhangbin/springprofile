#######日志级别#############
#Debug     调试信息   级别最低
#Info      一般信息
#Warn      警告信息
#Error     错误信息
#Fatal     严重错误信息  级别最高，错误最严重的（在slf4j中没有这个级别）
##########################

#配置根Logger：
#log4j.rootLogger = [ level ] , appenderName1, appenderName2, …（默认输出目的地，当前端传入类名）
#log4j.additivity.org.apache=false：表示Logger不会在父Logger的appender里输出，默认为true。
#level ：设定日志记录的最低级别，可设的值有OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别，Log4j建议只使用中间四个级别。通过在这里设定级别，您可以控制应用程序中相应级别的日志信息的开关，比如在这里设定了INFO级别，则应用程序中所有DEBUG级别的日志信息将不会被打印出来。
#appenderName：就是指定日志信息要输出到哪里。可以同时指定多个输出目的地，用逗号隔开。
#例如：log4j.rootLogger＝INFO,A1,B2,C3

#######日志的输出位置#########
#org.apache.log4j.ConsoleAppender：将日志信息输出到控制台。
#org.apache.log4j.FileAppender：将日志信息输出到一个文件。
#org.apache.log4j.DailyRollingFileAppender：将日志信息输出到一个日志文件，并且每天输出到一个新的日志文件。
#org.apache.log4j.RollingFileAppender：将日志信息输出到一个日志文件，当文件大小达到指定尺寸时，会自动把文件改名，同时产生一个新的文件。
#org.apache.log4j.WriteAppender：将日志信息以流格式发送到任意指定地方。
#org.apache.log4j.jdbc.JDBCAppender：通过JDBC把日志信息输出到数据库中。
#org.apache.log4j.net.SMTPAppender：将日志输出到邮件
#########################

#######日志格式化器layout####
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
##########################

##########日志信息格式中几个符号所代表的含义##############
# -X号: X信息输出时左对齐；
# %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
# %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
# %r: 输出自应用启动到输出该log信息耗费的毫秒数
# %c: 输出日志信息所属的类目，通常就是所在类的全名
# %t: 输出产生该日志事件的线程名
# %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)
# %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
# %%: 输出一个"%"字符
# %F: 输出日志消息产生时所在的文件名称
# %L: 输出代码中的行号
# %m: 输出代码中指定的消息,产生的日志具体信息
# %n: 输出一个回车换行符，Windows平台为"/r/n"，Unix平台为"/n"输出日志信息换行
# 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
# 1)%20:最小的宽度是20，如果小于20的话，默认的情况下右对齐。
# 2)%-20:最小的宽度是20，如果小于20的话，"-"号指定左对齐。
# 3)%.30:最大的宽度是30，如果大于30的话，就会将左边多出的字符截掉，但小于30的话也不会
##################################################


#######日志#########

#log4j.rootLogger=DEBUG,Console,DayFile,FixedFile,logMail,logDB
log4j.rootLogger=DEBUG,Console,FixedFile

###输出到控制台配置#########
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=[%-5p][%-19d{yyyy/MM/dd HH:mm:ss}][%l]  %m%n
#Threshold=[Level]是个全局的过滤器，它将把低于所设置的Level的信息过滤不显示出来。
log4j.appender.Console.Threshold=info
log4j.appender.Console.Target=System.out
log4j.appender.Console.ImmediateFlush=true



####输出到文件配置(每天一个日志文件)##########
#log4j.appender.DayFile=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.DayFile.layout=org.apache.log4j.PatternLayout
#log4j.appender.DayFile.layout.ConversionPattern=[%-5p][%-19d{yyyy/MM/dd HH:mm:ss}][%l]  %m%n
#log4j.appender.DayFile.Threshold=INFO
#log4j.appender.DayFile.ImmediateFlush=true
#log4j.appender.DayFile.Append=true
#log4j.appender.DayFile.Encoding=UTF-8
#log4j.appender.DayFile.File=/daylogs/log
#log4j.appender.DayFile.BufferedIO=true
##缓存单位为byte
#log4j.appender.DayFile.BufferSize=8192
#log4j.appender.DayFile.DatePattern='.'yyyy-MM-dd
## -DatePattern='.'yyyy-ww:每周滚动一次文件,即每周产生一个新的文件。还可以按用以下参数:
##              '.'yyyy-MM:每月
##              '.'yyyy-ww:每周
##              '.'yyyy-MM-dd:每天
##              '.'yyyy-MM-dd-a:每天两次
##              '.'yyyy-MM-dd-HH:每小时
##              '.'yyyy-MM-dd-HH-mm:每分钟
#
#
#
#
####输出到文件配置(文件大小达到某个值之后就产生一个新的日志文件)##########
log4j.appender.FixedFile=org.apache.log4j.RollingFileAppender
log4j.appender.FixedFile.layout=org.apache.log4j.PatternLayout
log4j.appender.FixedFile.layout.ConversionPattern=[%-5p][%-19d{yyyy/MM/dd HH:mm:ss}][%l]  %m%n
log4j.appender.FixedFile.Threshold=Error
log4j.appender.FixedFile.Append=true
log4j.appender.FixedFile.ImmediateFlush=true
log4j.appender.FixedFile.MaxFileSize=10MB
log4j.appender.FixedFile.MaxBackupIndex=50
log4j.appender.FixedFile.Encoding=UTF-8
log4j.appender.FixedFile.File=/Users/binzhang/Desktop/fixedlogs/log.log
#开启缓存,缓存不满，不写入文件
#log4j.appender.FixedFile.BufferedIO=true
#缓存单位为byte，默认8k
#log4j.appender.FixedFile.BufferSize=8192
#
#
#
##用Email发送日志
#log4j.appender.logMail=org.apache.log4j.net.SMTPAppender
#log4j.appender.logMail.layout=org.apache.log4j.PatternLayout
#log4j.appender.logMail.layout.ConversionPattern=[%-5p][%-19d{yyyy/MM/dd HH:mm:ss}][%l]  %m%n
#log4j.appender.logMail.layout.LocationInfo=TRUE
#log4j.appender.logMail.layout.Title=TestLog Mail LogFile
#log4j.appender.logMail.Threshold=ERROR
#log4j.appender.logMail.SMTPDebug=FALSE
#log4j.appender.logMail.SMTPHost=SMTP.163.com
#log4j.appender.logMail.From=abcd@163.com
#log4j.appender.logMail.To=123456@qq.com
##抄送
##log4j.appender.logMail.Cc=12345@gmail.com
##密送
##log4j.appender.logMail.Bcc=123456@gmail.com
#log4j.appender.logMail.SMTPUsername=abcd
#log4j.appender.logMail.SMTPPassword=123456
#log4j.appender.logMail.Subject=Log4j Log Messages
##单位是KB
#log4j.appender.logMail.BufferSize=10
#log4j.appender.logMail.SMTPAuth=TRUE
#
#
##将日志登录到MySQL数据库
#log4j.appender.logDB=org.apache.log4j.jdbc.JDBCAppender
#log4j.appender.logDB.layout=org.apache.log4j.PatternLayout
#log4j.appender.logDB.Driver=com.mysql.jdbc.Driver
#log4j.appender.logDB.URL=jdbc:mysql://127.0.0.1:3306/zmyproject
#log4j.appender.logDB.User=root
#log4j.appender.logDB.Password=root
#log4j.appender.logDB.Threshold=ERROR
####这里是指缓存的sql条数，默认是1
#log4j.appender.logDB.BufferSize=10
#log4j.appender.logDB.Sql=INSERT INTO testlog_log4j(project_name,create_date,create_time,log_level,category,file_name,thread_name,line,all_category,message) values('testlog','%d{yyyy-MM-dd}','%d{yyyy-MM-dd HH:mm:ss}','%p','%c','%F','%t','%L','%l','%m')


#配置mybatis的日志（下面的的key对应上dao的路径即可）
#mybatis的日志必须是DEBUG及以下的级别才会打印